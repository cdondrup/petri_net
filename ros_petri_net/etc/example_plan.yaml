instances: &instances
    - "time"
    - "value"
action_types:
    BaseAction: &base_action
        instances: *instances
    ROSAction: &ros_action
        <<: *base_action
        type:
            module: "rpn_ros_interface.action"
            class:  "ROSAtomicAction"
    KBAction: &kb_action
        <<: *base_action
        type:
            module: "pnp_actions.kb_action"
            class:  "KBAction"
actions:
    dummy_server:
        <<: *ros_action
        params:
            - "value"
        effects:
            or:
                - Comparison: ["eq", [Query: "time", Query: "value"]]
                - not: {Comparison: ["ne", [Query: "time", Query: "value"]]}
    wait:
        <<: *ros_action
        params:
            - "time"
        preconditions:
            Exists: [Query: "time"]
    kb_operation:
        <<: *kb_action
        params:
            - "operation"
            - "result"
---
initial_knowledge:
    value: 5
plan:
    - while: 
        condition: {Comparison: ["gt", [Query: "value", 2]]}
        actions:
            - dummy_server: {}
            - kb_operation:
                operation: {Operation: ["sub", [Query: "value", 1]]}
                result: "value"
    - concurrent_actions:
        - wait: {}
        - wait: {}
        - concurrent_actions:
            - wait: {time: 5}
            - wait: {time: 6}

