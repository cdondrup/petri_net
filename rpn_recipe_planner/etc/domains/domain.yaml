instances: &instances
    - 
external_knowledge_base:
    module: "rpn_rp_kb.rpn_rp_knowledge_base"
    class:  "RPKnowledgeBase"
action_types:
    BaseAction: &base_action
        instances: *instances
    ROSAction: &ros_action
        <<: *base_action
        type:
            module: "rpn_ros_interface.action"
            class:  "ROSAtomicAction"
    RPNAction: &rpn_action
        <<: *base_action
        type:
            module: "rpn_ros_interface.rpn_action"
            class:  "RPNAtomicAction"
    KBAction: &kb_action
        <<: *base_action
        type:
            module: "pnp_actions.kb_action"
            class:  "KBAction"
actions:
    test_server:
        <<: *rpn_action
        params:
            - "place_frame"
            - "human_frame"
    check_shop_instance:
        <<: *kb_action
        params:
            - "operation"
        preconditions:
            and:
                - Comparison: ["contains", [RemoteQuery: ["place", {onto_type: "class", onto_action: "getDown"}], RemoteQuery: [LocalQuery: "place_frame", {onto_type: "class", onto_action: "find"}]]]
        effects:
            and:
                - Comparison: ["contains", [RemoteQuery: ["shop", {onto_action: "getType"}], RemoteQuery: [LocalQuery: "place_frame", {onto_action: "find"}]]]
    route_generation:
        <<: *rpn_action
        params:
            - "place_frame"
        preconditions:
            and: 
                Exists: [LocalQuery: "place_frame"]
        effects:
            and:
                Exists: [LocalQuery: "route_array"]
    route_description_generation:
        <<: *rpn_action
        params:
            - "route"
        preconditions:
            and:
                - Exists: [LocalQuery: "route"]
    filter_routes:
        <<: *rpn_action
        params:
            - "route_constraints"
            - "route_array"
    kb_operation:
        <<: *kb_action
        params:
            - "route"

